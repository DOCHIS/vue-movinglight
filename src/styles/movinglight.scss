:root {
  --beam-color: #ffffff;
  --beam-width: 10;
  --beam-length: 1000px;
  --beam-intensity: 1;
  --prism-rotation: 0deg;
  --prism-spread: 30px;
  --pan-angle: 0deg;
  --tilt-angle: 0deg;
  --pan-duration: 1s;
  --tilt-duration: 1s;
  --beam-color-duration: 0.5s;
  --beam-width-duration: 0.5s;
}

// Base moving light styles
.moving-light {
  position: fixed;
  width: 40px;
  height: 40px;

  // Mount position variations
  &.mount {
    &-top {
      top: 0;
      transform-origin: center bottom;
    }

    &-left {
      left: 0;
      transform-origin: right center;
    }

    &-right {
      right: 0;
      transform-origin: left center;
    }

    &-bottom {
      bottom: 0;
      transform-origin: center top;
    }
  }
}

// Light base structure
.light {
  &-base {
    position: relative;
    width: 100%;
    height: 100%;
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    border-radius: 6px;
    box-shadow: inset -2px -2px 6px rgba(0, 0, 0, 0.5),
      inset 2px 2px 6px rgba(255, 255, 255, 0.1);
    z-index: 9999;

    &::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 8px;
      height: 8px;
      background: #444;
      border-radius: 50%;
      transform: translate(-50%, -50%);
      box-shadow: inset -1px -1px 3px rgba(0, 0, 0, 0.5);
    }
  }

  // Light beam effect
  &-beam {
    position: absolute;
    top: 100%;
    left: 50%;
    width: 200px;
    height: var(--beam-length);
    transform-origin: top center;
    transform: translate(-50%, 0);
    mix-blend-mode: screen;
    will-change: transform;
    filter: blur(2px);
    z-index: 9998;
    opacity: var(--beam-intensity);
    transition: background var(--beam-color-duration) ease,
      clip-path var(--beam-width-duration) ease;

    background: linear-gradient(
      to bottom,
      var(--beam-color) 0%,
      color-mix(in srgb, var(--beam-color) 50%, transparent) 70%,
      transparent 100%
    );

    clip-path: polygon(
      calc(50% - (var(--beam-width) * 1%)) 0%,
      calc(50% + (var(--beam-width) * 1%)) 0%,
      calc(50% + (var(--beam-width) * 5%)) 100%,
      calc(50% - (var(--beam-width) * 5%)) 100%
    );

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--beam-color);
      opacity: 0.3;
      filter: blur(4px);
      clip-path: polygon(
        calc(50% - (var(--beam-width) * 0.8%)) 0%,
        calc(50% + (var(--beam-width) * 0.8%)) 0%,
        calc(50% + (var(--beam-width) * 5.5%)) 100%,
        calc(50% - (var(--beam-width) * 5.5%)) 100%
      );
      transition: background var(--beam-color-duration) ease,
        clip-path var(--beam-width-duration) ease;
    }

    // Prism beam split effect
    &.with-prism {
      &::after {
        content: "";
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        background: inherit;
        opacity: 0.5;
        transform-origin: top center;
        clip-path: polygon(
          calc(50% - (var(--beam-width) * 0.8%)) 0%,
          calc(50% + (var(--beam-width) * 0.8%)) 0%,
          calc(50% + (var(--beam-width) * 5.5%)) 100%,
          calc(50% - (var(--beam-width) * 5.5%)) 100%
        );
        transition: background var(--beam-color-duration) ease,
          clip-path var(--beam-width-duration) ease;
      }
    }
  }
}
:root {
  --beam-color: #ffffff;
  --beam-width: 10;
  --beam-length: 1000px;
  --beam-intensity: 1;
  --prism-rotation: 0deg;
  --prism-spread: 30px;
  --pan-angle: 0deg;
  --tilt-angle: 0deg;
  --pan-duration: 1s;
  --tilt-duration: 1s;
  --beam-color-duration: 0.5s;
  --beam-width-duration: 0.5s;
}

// Base moving light styles
.moving-light {
  position: fixed;
  width: 40px;
  height: 40px;

  // Mount position variations
  &.mount {
    &-top {
      top: 0;
      transform-origin: center bottom;
    }

    &-left {
      left: 0;
      transform-origin: right center;
    }

    &-right {
      right: 0;
      transform-origin: left center;
    }

    &-bottom {
      bottom: 0;
      transform-origin: center top;
    }
  }
}

// Light base structure
.light {
  &-base {
    position: relative;
    width: 100%;
    height: 100%;
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    border-radius: 6px;
    box-shadow: inset -2px -2px 6px rgba(0, 0, 0, 0.5),
      inset 2px 2px 6px rgba(255, 255, 255, 0.1);
    z-index: 9999;

    &::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 8px;
      height: 8px;
      background: #444;
      border-radius: 50%;
      transform: translate(-50%, -50%);
      box-shadow: inset -1px -1px 3px rgba(0, 0, 0, 0.5);
    }
  }

  &-head {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transform: rotate(var(--pan-angle));
    transition: transform var(--pan-duration) linear;

    &::before {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 30px;
      height: 30px;
      background: linear-gradient(145deg, #3a3a3a, #2a2a2a);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      box-shadow: -2px -2px 4px rgba(0, 0, 0, 0.5),
        2px 2px 4px rgba(255, 255, 255, 0.1);
    }
  }

  &-yoke {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-origin: center center;
    transform-style: preserve-3d;
    transform: rotateX(var(--tilt-angle));
    transition: transform var(--tilt-duration) linear;

    &::before {
      content: "";
      position: absolute;
      left: -10px;
      width: 60px;
      height: 36px;
      background: linear-gradient(145deg, #444, #333);
      border-radius: 18px;
      box-shadow: -2px -2px 4px rgba(0, 0, 0, 0.5),
        2px 2px 4px rgba(255, 255, 255, 0.1);
    }
  }

  &-fixture {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-origin: center bottom;
    transform-style: preserve-3d;

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 50%;
      width: 50px;
      height: 50px;
      background: linear-gradient(145deg, #4a4a4a, #3a3a3a);
      border-radius: 10px;
      transform: translate(-50%, -10px) rotateX(-30deg);
      box-shadow: -2px -2px 4px rgba(0, 0, 0, 0.5),
        2px 2px 4px rgba(255, 255, 255, 0.1);
    }

    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 50%;
      width: 40px;
      height: 40px;
      background: #222;
      border-radius: 50%;
      transform: translate(-50%, -5px) rotateX(-30deg);
      box-shadow: inset -2px -2px 6px rgba(0, 0, 0, 0.5),
        inset 2px 2px 6px rgba(255, 255, 255, 0.1);
    }
  }

  // Light beam effect
  &-beam {
    position: absolute;
    top: 100%;
    left: 50%;
    width: 40px;
    height: var(--beam-length);
    transform-origin: top center;
    transform: translate(-50%, 0);
    mix-blend-mode: screen;
    will-change: transform;
    filter: blur(2px);
    z-index: 9998;
    opacity: var(--beam-intensity);
    transition: background var(--beam-color-duration) ease,
      clip-path var(--beam-width-duration) ease;

    background: linear-gradient(
      to bottom,
      var(--beam-color) 0%,
      color-mix(in srgb, var(--beam-color) 50%, transparent) 70%,
      transparent 100%
    );

    clip-path: polygon(
      calc(50% - (var(--beam-width) * 0.2%)) 0%,
      calc(50% + (var(--beam-width) * 0.2%)) 0%,
      calc(50% + (var(--beam-width) * 2.5%)) 100%,
      calc(50% - (var(--beam-width) * 2.5%)) 100%
    );

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--beam-color);
      opacity: 0.3;
      filter: blur(4px);
      clip-path: polygon(
        calc(50% - (var(--beam-width) * 0.15%)) 0%,
        calc(50% + (var(--beam-width) * 0.15%)) 0%,
        calc(50% + (var(--beam-width) * 3%)) 100%,
        calc(50% - (var(--beam-width) * 3%)) 100%
      );
      transition: background var(--beam-color-duration) ease,
        clip-path var(--beam-width-duration) ease;
    }

    // Prism beam split effect
    &.with-prism {
      &::after {
        content: "";
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        background: inherit;
        opacity: 0.5;
        transform-origin: top center;
        clip-path: polygon(
          calc(50% - (var(--beam-width) * 0.15%)) 0%,
          calc(50% + (var(--beam-width) * 0.15%)) 0%,
          calc(50% + (var(--beam-width) * 3%)) 100%,
          calc(50% - (var(--beam-width) * 3%)) 100%
        );
        transition: background var(--beam-color-duration) ease,
          clip-path var(--beam-width-duration) ease;
      }

      &[data-facets="2"]::after {
        box-shadow: calc(var(--prism-spread) * -1) 0 var(--beam-color),
          var(--prism-spread) 0 var(--beam-color);
        transform: rotate(var(--prism-rotation));
      }

      &[data-facets="3"]::after {
        box-shadow: calc(var(--prism-spread) * -0.866)
            calc(var(--prism-spread) * 0.5) var(--beam-color),
          calc(var(--prism-spread) * 0.866) calc(var(--prism-spread) * 0.5)
            var(--beam-color);
        transform: rotate(var(--prism-rotation));
      }

      &[data-facets="4"]::after {
        box-shadow: calc(var(--prism-spread) * -1) 0 var(--beam-color),
          var(--prism-spread) 0 var(--beam-color),
          0 var(--prism-spread) var(--beam-color);
        transform: rotate(var(--prism-rotation));
      }

      &[data-facets="5"]::after {
        box-shadow: calc(var(--prism-spread) * -0.951)
            calc(var(--prism-spread) * 0.309) var(--beam-color),
          calc(var(--prism-spread) * -0.588) calc(var(--prism-spread) * -0.809)
            var(--beam-color),
          calc(var(--prism-spread) * 0.588) calc(var(--prism-spread) * -0.809)
            var(--beam-color),
          calc(var(--prism-spread) * 0.951) calc(var(--prism-spread) * 0.309)
            var(--beam-color);
        transform: rotate(var(--prism-rotation));
      }
    }
  }
}
